# DB connection이란?
> 데이터베이스를 사용하기 위해서는 데이터베이스와 사용하고자 하는 사용자와 **연결**이 되어야 한다.
이때, **연결하는 수단**을 **DB connection**이라고 부른다.
java에서는 주로 JDBC를 활용하여 DB connection을 사용한다.

## DB connection 사용법
> DB connection을 사용하기 위해서는 **데이터베이스 드라이버**와 **데이터베이스 연결 정보가 담긴 URL**이 필요하다.
아래는 팀 프로젝트에서 사용된 설정파일인 YML파일이다.
![](https://velog.velcdn.com/images/ksh9409255/post/ca0259d4-0c71-4856-9d8b-0bf31c4bb79c/image.png)
그리고 커넥션을 사용하기 위해서는 커넥션 객체를 생성해야 한다.
커넥션 객체란 **DB연결 객체**인 것이다.

# 커넥션 pool이란?
> 웹 컨테이너(WAS)가 실행되면서 일정량의 Connection 객체를 미리 만들어서 pool에 저장했다가, 클라이언트 요청이 오면 Connection 객체를 빌려주고 해당 객체의 임무가 완료되면 다시 Connection 객체를 반납 받아서 pool에 저장하는 프로그래밍 기법이다.
출처 - https://steady-coding.tistory.com/564
즉, POOL에 미리 연결 객체들을 만들어 놓고 요청이 들어올때마다 가져다 쓰는 것이라 생각한다.

## 커넥션 pool관리
> 커넥션 pool관리를 위해서는 여러가지가 있지만 대표적으로 **hikariCP**를 사용한다.(히카리에 대한 포스팅은 다음에 더 자세히 작성함)

## 커넥션 pool의 장점
> 
1. 성능향상 
- 커넥션 객체를 미리 만들어놓기 때문에 커넥션을 생성하고 끊고 하는 불필요한 작업이 없어지게 되어 성능 향상에 도움이 된다.
2. 서버 자원 고갈 방지 가능
- 커넥션 객체 수를 제어할 수 있기 때문에 자원고갈을 방지 할 수 있다.
3. 비용 감소
- 다쓴 커넥션 객체를 다시 pool에 넣고 재사용하기 때문에 객체를 만드는 비용을 줄일 수 있다.

## 커넥션 pool의 단점
> **커넥션 객체의 개수**를 설정하기 까다롭다는 단점이 있다.
커넥션 객체의 개수가 너무 많을 경우 : 메모리를 많이 사용하기 때문에 오히려 성능이 떨어질 수 있다.
커넥션 객체의 개수가 너무 적을 경우 : 모든 커넥션 객체가 사용 중이라면 커넥션 객체가 반납될때까지 대기해야 한다.

## 적당한 커넥션 객체의 수는?(참고만)
> HikariCP의 공식 문서에 의하면, 객체수 = ((현제 서버의 cpu개수) * 2) + DB서버가 관리할 수 있는 동시I/O요청 수) 로 정의하고 있다.
이떼, 하드디스크 하나당 DB서버가 관리할 수 있는 동시I/O요청 1개이다.

- 해당 포스팅은 https://steady-coding.tistory.com/564 를 참조하였습니다.
